<!DOCTYPE html>
<html lang="en"> 
<head>
    <!-- profile page -->
    <!-- 🌐 Meta Info and Imports -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%=title %></title>
    <link href="https://cdn.jsdelivr.net/npm/remixicon@4.0.0/fonts/remixicon.css" rel="stylesheet">
    <link rel="stylesheet" href="/stylesheets/top-pane.css">
</head>
    <body class="bg-gray-900 text-white">
                <!-- Profile Header -->
<div class="max-w-4xl mx-auto text-center py-12">
    <div class="flex justify-center mb-4">
        <!-- Placeholder Avatar -->
        <div class="w-24 h-24 rounded-full bg-gray-800 flex items-center justify-center text-4xl">
            <i class="ri-user-line"></i>
        </div>
    </div>
    <h1 class="text-3xl font-bold mb-2"><%= user.username %></h1>
    <% if (user.bio) { %>
        <p class="text-gray-400"><%= user.bio || 'Welcome to Boardly' %></p>
    <% } else { %>
        <p class="text-gray-500 italic">No bio added</p>
    <% } %>
</div>


        <!-- Posts Grid -->
        <div class="relative z-10 max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 pt-8 pb-24">
            <% if (posts && posts.length > 0) { %>
                <div class="columns-1 sm:columns-2 md:columns-3 gap-4">
    <% posts.forEach(function(post) { %>
        <div class="post-card rounded-2xl border border-gray-700 overflow-hidden relative group mb-4">
            <div class="gradient-overlay">
                <img 
                    src="/images/uploads/<%= post.picture %>" 
                    alt="<%= post.caption || 'Post image' %>" 
                    class="post-image w-full"
                    loading="lazy"
                />
                <% if (post.caption) { %>
                    <h3 class="text-lg font-bold text-white mt-2"><%= post.caption %></h3>
                <% } %>
                <span class="text-sm text-gray-400">@<%= post.user.username %></span>
            </div>
            <button 
                class="pin-btn absolute top-3 right-3 w-8 h-8 rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity"
                data-post-id="<%= post._id %>"
                onclick="togglePin(this)">
                <i class="ri-pushpin-line text-lg"></i>
            </button>
        </div>
    <% }); %>
</div>
            <% } else { %>
                <!-- No Posts Message -->
                <div class="no-posts">
                    <div class="w-24 h-24 bg-gray-800 rounded-full flex items-center justify-center mx-auto mb-4">
                        <i class="ri-image-line text-4xl text-gray-600"></i>
                    </div>
                    <h3 class="text-xl font-semibold text-gray-400 mb-2">No posts yet</h3>
                    <p class="text-gray-500">Be the first to share something amazing!</p>
                </div>
            <% } %>
        </div>
    

    <!-- Bottom Navigation -->
    <nav class="fixed bottom-0 left-0 right-0 z-50 bottom-nav">
        <div class="flex items-center justify-around py-4 px-6">
            <!-- Profile Button -->
            <button class="nav-btn flex flex-col items-center space-y-1 p-3 rounded-xl" onclick="toggleNavButton(this, 'profile')">
            <i class="ri-user-line text-2xl"></i>
            <span class="text-xs">Profile</span>
            </button>

            <!-- Boards Button -->
            <button class="logo-btn w-14 h-14 rounded-2xl flex items-center justify-center" onclick="toggleNavButton(this, 'boards')">
            <svg class="w-7 h-7 text-white" fill="currentColor" viewBox="0 0 20 20">
            <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
            </svg>
            </button>

            <!-- Upload Button -->
            <button class="upload-btn flex flex-col items-center space-y-1 p-3 rounded-xl" onclick="toggleNavButton(this, 'upload')">
            <i class="ri-upload-line text-2xl"></i>
            <span class="text-xs">Upload</span>
            </button>
        </div>
    </nav>

    <!-- JavaScript -->
    <script>
        // Toggle mobile menu
        function toggleMobileMenu() {
            const menu = document.getElementById('mobileMenu');
            menu.classList.toggle('active');
        }

        // Toggle pin function with backend integration
        async function togglePin(button) {
            const postId = button.getAttribute('data-post-id');
            const icon = button.querySelector('i');
            const isPinned = icon.classList.contains('ri-pushpin-fill');
            
            // Show loading state
            const originalIcon = icon.className;
            icon.className = 'loading';
            
            try {
                const response = await fetch(`/save/${postid}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ postId: postId, action: isPinned ? 'unpin' : 'pin' })
                });
                
                if (response.ok) {
                    const result = await response.json();
                    
                    // Update UI based on result
                    if (result.pinned) {
                        icon.className = 'ri-pushpin-fill text-lg text-blue-400';
                        button.classList.add('pinned');
                    } else {
                        icon.className = 'ri-pushpin-line text-lg';
                        button.classList.remove('pinned');
                    }
                    
                    // Show success feedback
                    showToast(result.pinned ? 'Post pinned!' : 'Post unpinned!', 'success');
                } else {
                    // Revert on error
                    icon.className = originalIcon;
                    showToast('Failed to update pin status', 'error');
                }
            } catch (error) {
                console.error('Error toggling pin:', error);
                // Revert on error
                icon.className = originalIcon;
                showToast('Network error occurred', 'error');
            }
        }

        // Close mobile menu when clicking outside
        document.addEventListener('click', function(event) {
            const menu = document.getElementById('mobileMenu');
            const button = event.target.closest('button');
            
            if (!menu.contains(event.target) && !button) {
                menu.classList.remove('active');
            }
        });

        
        // Show toast notification
        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            toast.className = `fixed top-20 right-4 z-[60] px-4 py-2 rounded-lg text-white text-sm transition-all duration-300 ${
                type === 'success' ? 'bg-green-600' : 
                type === 'error' ? 'bg-red-600' : 'bg-blue-600'
            }`;
            toast.textContent = message;
            document.body.appendChild(toast);
            
            setTimeout(() => {
                toast.style.transform = 'translateX(100%)';
                setTimeout(() => toast.remove(), 300);
            }, 3000);
        }

        function toggleNavButton(button, type) {
    // Remove active class from all nav buttons
        document.querySelectorAll('.nav-btn').forEach(btn => btn.classList.remove('active'));
        document.querySelectorAll('.upload-btn').forEach(btn => btn.classList.remove('active'));

        // Handle specific button types
        if (type === 'profile') {
            window.location.href = "/profile"; // 👈 Redirect to profile
        } else if (type === 'upload') {
            window.location.href = "/upload";  // 👈 Redirect to upload
        } else if (type === 'boards') {
            if (type === 'boards') {
        const logoBtn = button; // use the clicked button
        logoBtn.style.transform = 'scale(0.95)';
        setTimeout(() => {
            logoBtn.style.transform = 'scale(1.05)';
            setTimeout(() => {
                logoBtn.style.transform = 'scale(1)';
            }, 100);
        }, 100);

        window.location.href = "/board";
        }
        }

        // Optionally set active styles (if you want)
        button.classList.add('active');
        }
        // Initialize animations when DOM is loaded
        document.addEventListener('DOMContentLoaded', function() {
            // Trigger animations for post cards
            const postCards = document.querySelectorAll('.post-card');
            postCards.forEach((card, index) => {
                setTimeout(() => {
                    card.style.animationDelay = `${index * 0.1}s`;
                }, 100);
            });
        });
    </script>
</body>
</html>


        